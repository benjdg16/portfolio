  const svgElements = useRef<SVGSVGElement>(null);
  const homeRef = useRef<HTMLElement>(null);

  function generateRndPt(
    min: number,
    max: number
  ): (direction?: number) => number {
    const delta = max - min;
    return (direction = 1) => (min + delta * Math.random()) * direction;
  }

  const randomX = generateRndPt(45, 55);
  const randomY = generateRndPt(45, 55);
  const randomDelay = generateRndPt(0, 1);
  const randomTime = generateRndPt(3, 5);
  const randomTime2 = generateRndPt(5, 10);
  const randomAngle = generateRndPt(8, 12);

  function rotate(
    target: Element | SVGSVGElement | null,
    direction: number
  ): void {
    gsap.to(target, {
      duration: randomTime2(),
      rotation: randomAngle(direction),
      // delay: randomDelay(),
      ease: Sine.easeInOut,
      onComplete: rotate,
      onCompleteParams: [target, direction * -1],
    });
  }

  function moveX(
    target: Element | SVGSVGElement | null,
    direction: number
  ): void {
    gsap.to(target, {
      duration: randomTime(),
      x: randomX(direction),
      ease: Sine.easeInOut,
      onComplete: moveX,
      onCompleteParams: [target, direction * -1],
    });
  }

  function moveY(
    target: Element | SVGSVGElement | null,
    direction: number
  ): void {
    gsap.to(target, {
      duration: randomTime(),
      y: randomY(direction),
      ease: Sine.easeInOut,
      onComplete: moveY,
      onCompleteParams: [target, direction * -1],
    });
  }

  useLayoutEffect(() => {
    const ctx = gsap.context(() => {
      gsap.set(svgElements, {
        x: randomX(-1),
        y: randomX(1),
        rotation: randomAngle(-1),
      });

      moveX(svgElements.current, 1);
      moveY(svgElements.current, -1);
      // rotate(svgElements.current, 1);
    }, homeRef);
    return () => ctx.revert();
  }, []);